name: Splatoon3 Result Uploader

on:
  schedule:
    - cron: '0 0-23/2 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CONFIG_TXT: ${{ secrets.CONFIG_TXT }}
      MY_GITHUB_PAT: ${{ secrets.MY_GITHUB_PAT }} # シークレット更新用のPersonal Access Token (PAT)

    name: Upload BattleLogs
    steps:
      # frozenpandaman/s3sのリポジトリをチェックアウト
      - name: Checkout frozenpandaman/s3s
        uses: actions/checkout@v3
        with:
          repository: 'frozenpandaman/s3s'
          path: s3s

      # Python 3.11のセットアップ
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
          cache-dependency-path: 's3s/requirements.txt'

      # シークレットから読み込んだCONFIG_TXTをconfig.txtとして保存
      - name: Generate config.txt
        working-directory: s3s
        run: |
          echo '${{ env.CONFIG_TXT }}' > config.txt
      
      # トークンの末尾5文字をログに出力して確認
      - name: Display last 5 characters of tokens
        working-directory: s3s
        run: |
          echo "api_key: $(tail -c 5 <<< $(grep 'api_key' config.txt | awk -F'"' '{print $4}'))"
          echo "gtoken: $(tail -c 5 <<< $(grep 'gtoken' config.txt | awk -F'"' '{print $4}'))"
          echo "bullettoken: $(tail -c 5 <<< $(grep 'bullettoken' config.txt | awk -F'"' '{print $4}'))"
          echo "session_token: $(tail -c 5 <<< $(grep 'session_token' config.txt | awk -F'"' '{print $4}'))"

      # s3sの依存パッケージをインストール
      - name: Install s3s requirements
        working-directory: s3s
        run: |
          pip install -r requirements.txt

      # 実行前のconfig.txtのハッシュ値を保存
      - name: Save original config.txt hash
        id: save_hash
        working-directory: s3s
        run: |
          original_hash=$(sha256sum config.txt | awk '{print $1}')
          echo "::set-output name=original_hash::$original_hash"

      # s3sを実行し、バトルログをアップロード (必要に応じてトークンを再生成)
      - name: Run s3s
        working-directory: s3s
        run: |
          python3 s3s.py -r

      # config.txtが更新されたかどうかを確認
      # 実行前のハッシュと実行後のハッシュを比較
      - name: Check if config.txt was updated
        id: check_update
        working-directory: s3s
        run: |
          new_hash=$(sha256sum config.txt | awk '{print $1}')
          if [ "$new_hash" != "${{ steps.save_hash.outputs.original_hash }}" ]; then
            echo "config.txtが更新されました。"
            echo "::set-output name=updated::true"
          else
            echo "config.txtは更新されていません。"
            echo "::set-output name=updated::false"
          fi

      # config.txtが更新された場合のみ、GitHub Secretsを更新
      - name: Update GitHub Secrets with new config.txt (if updated)
        if: steps.check_update.outputs.updated == 'true'
        working-directory: s3s
        run: |
          # 新しいconfig.txtの内容をBase64エンコード
          NEW_CONFIG=$(base64 -w 0 config.txt)

          # リポジトリ名を取得
          REPO_NAME="gorinngo07/Splatoon3_Result_Uploader"

          # 公開鍵を取得
          PUBLIC_KEY=$(curl -H "Authorization: token $MY_GITHUB_PAT" https://api.github.com/repos/$REPO_NAME/actions/secrets/public-key | jq -r .key)
          KEY_ID=$(curl -H "Authorization: token $MY_GITHUB_PAT" https://api.github.com/repos/$REPO_NAME/actions/secrets/public-key | jq -r .key_id)

    # 新しいconfig.txtを公開鍵で暗号化
    ENCRYPTED_CONFIG=$(echo -n "$NEW_CONFIG" | openssl rsautl -encrypt -pubin -inkey <(echo "$PUBLIC_KEY" | base64 -d) | base64 | tr -d '\n')

    # GitHub Secretsを更新
    curl -X PUT \
      -H "Authorization: token $MY_GITHUB_PAT" \
      -H "Accept: application/vnd.github.v3+json" \
      https://api.github.com/repos/$REPO_NAME/actions/secrets/CONFIG_TXT \
      -d "{\"encrypted_value\":\"$ENCRYPTED_CONFIG\", \"key_id\":\"$KEY_ID\"}"

            -H "Authorization: token $MY_GITHUB_PAT" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$REPO_NAME/actions/secrets/CONFIG_TXT \
            -d "{\"encrypted_value\":\"$NEW_CONFIG\", \"key_id\":\"$KEY_ID\"}"
